//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WamesRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class wamesEntities : DbContext
    {
        public wamesEntities()
            : base("name=wamesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<availablePlatforms> availablePlatforms { get; set; }
        public virtual DbSet<departments> departments { get; set; }
        public virtual DbSet<employees> employees { get; set; }
        public virtual DbSet<games> games { get; set; }
        public virtual DbSet<genre> genre { get; set; }
        public virtual DbSet<headquarters> headquarters { get; set; }
        public virtual DbSet<positions> positions { get; set; }
        public virtual DbSet<Team> Team { get; set; }
    
        [DbFunction("wamesEntities", "CalculateAverageSalaryForHeadQuarters")]
        public virtual IQueryable<CalculateAverageSalaryForHeadQuarters_Result> CalculateAverageSalaryForHeadQuarters(string departmentName)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalculateAverageSalaryForHeadQuarters_Result>("[wamesEntities].[CalculateAverageSalaryForHeadQuarters](@DepartmentName)", departmentNameParameter);
        }
    
        [DbFunction("wamesEntities", "GetPositionByName")]
        public virtual IQueryable<positions> GetPositionByName(string positionName)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("positionName", positionName) :
                new ObjectParameter("positionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<positions>("[wamesEntities].[GetPositionByName](@positionName)", positionNameParameter);
        }
    
        [DbFunction("wamesEntities", "GetTopSalaryByPosition")]
        public virtual IQueryable<GetTopSalaryByPosition_Result> GetTopSalaryByPosition(string positionName)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("PositionName", positionName) :
                new ObjectParameter("PositionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTopSalaryByPosition_Result>("[wamesEntities].[GetTopSalaryByPosition](@PositionName)", positionNameParameter);
        }
    
        public virtual ObjectResult<departments> GetDepartmentsFromHeadQuarters(string hqName)
        {
            var hqNameParameter = hqName != null ?
                new ObjectParameter("HqName", hqName) :
                new ObjectParameter("HqName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<departments>("GetDepartmentsFromHeadQuarters", hqNameParameter);
        }
    
        public virtual ObjectResult<departments> GetDepartmentsFromHeadQuarters(string hqName, MergeOption mergeOption)
        {
            var hqNameParameter = hqName != null ?
                new ObjectParameter("HqName", hqName) :
                new ObjectParameter("HqName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<departments>("GetDepartmentsFromHeadQuarters", mergeOption, hqNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesByPositionName(string positionName)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("positionName", positionName) :
                new ObjectParameter("positionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesByPositionName", positionNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesByPositionName(string positionName, MergeOption mergeOption)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("positionName", positionName) :
                new ObjectParameter("positionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesByPositionName", mergeOption, positionNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromDepartment(string departmentName, string hqName)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var hqNameParameter = hqName != null ?
                new ObjectParameter("HqName", hqName) :
                new ObjectParameter("HqName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromDepartment", departmentNameParameter, hqNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromDepartment(string departmentName, string hqName, MergeOption mergeOption)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var hqNameParameter = hqName != null ?
                new ObjectParameter("HqName", hqName) :
                new ObjectParameter("HqName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromDepartment", mergeOption, departmentNameParameter, hqNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromHeadQuarters(string headQuartersName)
        {
            var headQuartersNameParameter = headQuartersName != null ?
                new ObjectParameter("headQuartersName", headQuartersName) :
                new ObjectParameter("headQuartersName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromHeadQuarters", headQuartersNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromHeadQuarters(string headQuartersName, MergeOption mergeOption)
        {
            var headQuartersNameParameter = headQuartersName != null ?
                new ObjectParameter("headQuartersName", headQuartersName) :
                new ObjectParameter("headQuartersName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromHeadQuarters", mergeOption, headQuartersNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromTheDepartmentWithSalaryHigherThenAverage(string departmentName)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromTheDepartmentWithSalaryHigherThenAverage", departmentNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromTheDepartmentWithSalaryHigherThenAverage(string departmentName, MergeOption mergeOption)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromTheDepartmentWithSalaryHigherThenAverage", mergeOption, departmentNameParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromTheTeam(Nullable<int> teamId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromTheTeam", teamIdParameter);
        }
    
        public virtual ObjectResult<employees> GetEmployeesFromTheTeam(Nullable<int> teamId, MergeOption mergeOption)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetEmployeesFromTheTeam", mergeOption, teamIdParameter);
        }
    
        public virtual ObjectResult<games> GetGamesByGenre(string genre)
        {
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesByGenre", genreParameter);
        }
    
        public virtual ObjectResult<games> GetGamesByGenre(string genre, MergeOption mergeOption)
        {
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesByGenre", mergeOption, genreParameter);
        }
    
        public virtual ObjectResult<games> GetGamesForSpecifiedPlatform(string gamePlatform)
        {
            var gamePlatformParameter = gamePlatform != null ?
                new ObjectParameter("GamePlatform", gamePlatform) :
                new ObjectParameter("GamePlatform", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesForSpecifiedPlatform", gamePlatformParameter);
        }
    
        public virtual ObjectResult<games> GetGamesForSpecifiedPlatform(string gamePlatform, MergeOption mergeOption)
        {
            var gamePlatformParameter = gamePlatform != null ?
                new ObjectParameter("GamePlatform", gamePlatform) :
                new ObjectParameter("GamePlatform", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesForSpecifiedPlatform", mergeOption, gamePlatformParameter);
        }
    
        public virtual ObjectResult<games> GetGamesMadeByTeam(string teamName)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesMadeByTeam", teamNameParameter);
        }
    
        public virtual ObjectResult<games> GetGamesMadeByTeam(string teamName, MergeOption mergeOption)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesMadeByTeam", mergeOption, teamNameParameter);
        }
    
        public virtual ObjectResult<games> GetGamesWithPriceBelowGivenPrice(Nullable<decimal> price)
        {
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesWithPriceBelowGivenPrice", priceParameter);
        }
    
        public virtual ObjectResult<games> GetGamesWithPriceBelowGivenPrice(Nullable<decimal> price, MergeOption mergeOption)
        {
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<games>("GetGamesWithPriceBelowGivenPrice", mergeOption, priceParameter);
        }
    
        public virtual ObjectResult<Team> GetTeamByGameTitle(string gameTitle)
        {
            var gameTitleParameter = gameTitle != null ?
                new ObjectParameter("GameTitle", gameTitle) :
                new ObjectParameter("GameTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Team>("GetTeamByGameTitle", gameTitleParameter);
        }
    
        public virtual ObjectResult<Team> GetTeamByGameTitle(string gameTitle, MergeOption mergeOption)
        {
            var gameTitleParameter = gameTitle != null ?
                new ObjectParameter("GameTitle", gameTitle) :
                new ObjectParameter("GameTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Team>("GetTeamByGameTitle", mergeOption, gameTitleParameter);
        }
    
        public virtual ObjectResult<employees> GetTopEarningEmployeeByPosition(string positionName)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("positionName", positionName) :
                new ObjectParameter("positionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetTopEarningEmployeeByPosition", positionNameParameter);
        }
    
        public virtual ObjectResult<employees> GetTopEarningEmployeeByPosition(string positionName, MergeOption mergeOption)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("positionName", positionName) :
                new ObjectParameter("positionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employees>("GetTopEarningEmployeeByPosition", mergeOption, positionNameParameter);
        }
    }
}
